{
  "address": "0x20e589Eda469eCB348e8A0aC4FE96F2156cD01e7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "currentBalance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "numPlayers",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "raffleState",
          "type": "uint256"
        }
      ],
      "name": "Raffle_UpkeepNotNeeded",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotEnoughETHEntered",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__NotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpkeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEntranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLatestTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumWords",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNumberOfPlayers",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getPlayer",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRaffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRecentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRequestConfirmations",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpkeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe45742ed002b1fd165808013311e409b3ebb6578df4ab6625d62024410dd258a",
  "receipt": {
    "to": null,
    "from": "0xF45afaB6a593A6d1E2B67A8Ca59AD95aA0412ffE",
    "contractAddress": "0x20e589Eda469eCB348e8A0aC4FE96F2156cD01e7",
    "transactionIndex": 12,
    "gasUsed": "1231516",
    "logsBloom": "0x
    "blockHash": "0x52e8bfdf3eb29fe4d4b222d586e2dd83c622141a0aa1c2d023e30b5024e01e9b",
    "transactionHash": "0xe45742ed002b1fd165808013311e409b3ebb6578df4ab6625d62024410dd258a",
    "logs": [],
    "blockNumber": 11163236,
    "cumulativeGasUsed": "5364649",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "10000000000000000",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    10093,
    500000,
    "30"
  ],
  "numDeployments": 1,
  "solcInputHash": "ee04401f5898a48d234ce17f680f703d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"currentBalance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"numPlayers\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"raffleState\",\"type\":\"uint256\"}],\"name\":\"Raffle_UpkeepNotNeeded\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotEnoughETHEntered\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__NotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpkeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEntranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLatestTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumWords\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNumberOfPlayers\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getPlayer\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRaffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRecentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRequestConfirmations\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpkeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Vincent Verdugo\",\"details\":\"This implements Chainlink VRF v2 and Chainlink Keepers\",\"kind\":\"dev\",\"methods\":{\"checkUpkeep(bytes)\":{\"details\":\"this is the function that the Chainlink keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \\\"open\\\" state\"}},\"title\":\"A sample raffle contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"This contract is for creating an untamperable decentralized smart contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0x3d709a5e0f1f9b8841172b10ba8af785dd51a13eda9fc395723a706e51329904\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface KeeperCompatibleInterface {\\n  /**\\n   * @notice method that is simulated by the keepers to see if any work actually\\n   * needs to be performed. This method does does not actually need to be\\n   * executable, and since it is only ever simulated it can consume lots of gas.\\n   * @dev To ensure that it is never called, you may want to add the\\n   * cannotExecute modifier from KeeperBase to your implementation of this\\n   * method.\\n   * @param checkData specified in the upkeep registration so it is always the\\n   * same for a registered upkeep. This can easily be broken down into specific\\n   * arguments using `abi.decode`, so multiple upkeeps can be registered on the\\n   * same contract and easily differentiated by the contract.\\n   * @return upkeepNeeded boolean to indicate whether the keeper should call\\n   * performUpkeep or not.\\n   * @return performData bytes that the keeper should call performUpkeep with, if\\n   * upkeep is needed. If you would like to encode data to decode later, try\\n   * `abi.encode`.\\n   */\\n  function checkUpkeep(bytes calldata checkData) external returns (bool upkeepNeeded, bytes memory performData);\\n\\n  /**\\n   * @notice method that is actually executed by the keepers, via the registry.\\n   * The data returned by the checkUpkeep simulation will be passed into\\n   * this method to actually be executed.\\n   * @dev The input to this method should not be trusted, and the caller of the\\n   * method should not even be restricted to any single registry. Anyone should\\n   * be able call it, and the input should be validated, there is no guarantee\\n   * that the data passed in is the performData returned from checkUpkeep. This\\n   * could happen due to malicious keepers, racing keepers, or simply a state\\n   * change while the performUpkeep transaction is waiting for confirmation.\\n   * Always validate the data passed in.\\n   * @param performData is the data which was passed back from the checkData\\n   * simulation. If it is encoded, it can easily be decoded into other types by\\n   * calling `abi.decode`. This data should not be trusted, and should be\\n   * validated against the contract's current state.\\n   */\\n  function performUpkeep(bytes calldata performData) external;\\n}\\n\",\"keccak256\":\"0xb6577cda6b731b655aebcb6e3c24f8658d3f4c5eda07200622d07d4570af33ea\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/Raffle.sol\":{\"content\":\"// Raffle\\n\\n// Enter the lottery (pay some amount)\\n// pick a random winner (verifiably random)\\n// winner to be selected every X minutes -> completely automated\\n\\n// Chainlink Oracle -> randomness, automated execution (chainlink keeper)\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity  ^0.8.7;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/KeeperCompatibleInterface.sol\\\";\\n\\nerror Raffle__NotEnoughETHEntered();\\nerror Raffle__TransferFailed();\\nerror Raffle__NotOpen();\\nerror Raffle_UpkeepNotNeeded(uint256 currentBalance, uint256 numPlayers, uint256 raffleState);\\n\\n/**\\n * @title A sample raffle contract\\n * @author Vincent Verdugo\\n * @notice This contract is for creating an untamperable decentralized smart contract\\n * @dev This implements Chainlink VRF v2 and Chainlink Keepers\\n */\\n\\ncontract Raffle is VRFConsumerBaseV2, KeeperCompatibleInterface\\n{\\n    /* Type Declarations */\\n    enum RaffleState\\n    {\\n        OPEN,\\n        CALCULATING\\n    }\\n\\n    /* State Variables */\\n    uint256 private immutable i_entranceFee;\\n    address payable[] private s_players;\\n    VRFCoordinatorV2Interface private immutable i_vrfCoordinator;\\n    bytes32 private immutable i_gasLane;\\n    uint64 private immutable i_subscriptionId;\\n    uint16 private constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 private immutable i_callbackGasLimit;\\n    uint32 private constant NUM_WORDS = 1;\\n\\n    // Lottery Variables\\n    address private s_recentWinner;\\n    RaffleState private s_raffleState;\\n    uint256 private s_lastTimestamp;\\n    uint256 private immutable i_interval;\\n\\n\\n    /* Events */\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    /* Functions */\\n\\n    constructor(\\n        address vrfCoordinatorV2, \\n        uint256 entranceFee, \\n        bytes32 gasLane, \\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit,\\n        uint256 interval\\n        ) VRFConsumerBaseV2(vrfCoordinatorV2)\\n    {   \\n        i_entranceFee = entranceFee;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n        i_callbackGasLimit = callbackGasLimit;\\n        s_raffleState = RaffleState.OPEN;\\n        s_lastTimestamp = block.timestamp;\\n        i_interval = interval;\\n    }\\n\\n    function enterRaffle() public payable\\n    {\\n        if (msg.value < i_entranceFee)\\n        {\\n            revert Raffle__NotEnoughETHEntered();\\n        }\\n        if (s_raffleState != RaffleState.OPEN)\\n        {\\n            revert Raffle__NotOpen();\\n        }\\n        s_players.push(payable(msg.sender));\\n\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    /**\\n     * @dev this is the function that the Chainlink keeper nodes call\\n     * they look for the `upkeepNeeded` to return true.\\n     * The following should be true in order to return true:\\n     * 1. Our time interval should have passed\\n     * 2. The lottery should have at least 1 player, and have some ETH\\n     * 3. Our subscription is funded with LINK\\n     * 4. The lottery should be in an \\\"open\\\" state\\n     */\\n    function checkUpkeep(bytes memory /*checkData*/) public view override \\n    returns (\\n        bool upkeepNeeded, \\n        bytes memory /* performData */\\n        )\\n    {\\n        bool isOpen = RaffleState.OPEN == s_raffleState;\\n        bool timePassed = ( (block.timestamp - s_lastTimestamp) > i_interval);\\n        bool hasPlayers = s_players.length > 0;\\n        bool hasBalance = address(this).balance > 0;\\n        bool upkeepNeeded = isOpen && timePassed && hasPlayers && hasBalance;\\n\\n        return (upkeepNeeded, \\\"0x0\\\");\\n\\n    }\\n\\n    function performUpkeep(bytes calldata /* performData */) external override\\n    {\\n        (bool upkeepNeeded, ) = checkUpkeep(\\\"0x\\\");\\n        if (!upkeepNeeded)\\n        {\\n            revert Raffle_UpkeepNotNeeded(\\n                address(this).balance, \\n                s_players.length, \\n                uint256(s_raffleState));\\n        }\\n\\n        s_raffleState = RaffleState.CALCULATING;\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(    \\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    function fulfillRandomWords(uint256 /*requestId*/, uint256[] memory randomWords) internal override\\n    {\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        s_raffleState = RaffleState.OPEN;\\n        s_players = new address payable[](0);\\n        s_lastTimestamp = block.timestamp;\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n\\n        if (!success)\\n        {\\n            revert Raffle__TransferFailed();\\n        }\\n\\n        emit WinnerPicked(recentWinner);\\n    }\\n\\n    function getEntranceFee() public view returns(uint256)\\n    {\\n        return i_entranceFee;\\n    }\\n\\n    function getPlayer(uint256 index) public view returns(address)\\n    {\\n        return s_players[index];\\n    }\\n\\n    function getRecentWinner() public view returns(address)\\n    {\\n        return s_recentWinner;\\n    }\\n\\n    function getRaffleState() public view returns(RaffleState)\\n    {\\n        return s_raffleState;\\n    }\\n\\n    function getNumWords() public pure returns(uint256)\\n    {\\n        return NUM_WORDS;\\n    }\\n\\n    function getNumberOfPlayers() public view returns(uint256)\\n    {\\n        return s_players.length;\\n    }\\n\\n    function getLatestTimestamp() public view returns(uint256)\\n    {\\n        return s_lastTimestamp;\\n    }\\n\\n    function getRequestConfirmations() public pure returns(uint256)\\n    {\\n        return REQUEST_CONFIRMATIONS;\\n    }\\n\\n    function getInterval() public view returns(uint256)\\n    {\\n        return i_interval;\\n    }\\n}\",\"keccak256\":\"0x82d084bb76e97c6580585fcdbb9397a02e885cd024e4aaf1802e2adb8b56a5f3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101606040523480156200001257600080fd5b506040516200189d3803806200189d8339818101604052810190620000389190620001ad565b858073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508460a081815250508573ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508360e081815250508267ffffffffffffffff166101008167ffffffffffffffff1660c01b815250508163ffffffff166101208163ffffffff1660e01b815250506000600160146101000a81548160ff02191690836001811115620001195762000118620002b5565b5b0217905550426002819055508061014081815250505050505050506200036b565b6000815190506200014b81620002e9565b92915050565b600081519050620001628162000303565b92915050565b60008151905062000179816200031d565b92915050565b600081519050620001908162000337565b92915050565b600081519050620001a78162000351565b92915050565b60008060008060008060c08789031215620001cd57620001cc620002e4565b5b6000620001dd89828a016200013a565b9650506020620001f089828a0162000168565b95505060406200020389828a0162000151565b94505060606200021689828a0162000196565b93505060806200022989828a016200017f565b92505060a06200023c89828a0162000168565b9150509295509295509295565b6000620002568262000267565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b600080fd5b620002f48162000249565b81146200030057600080fd5b50565b6200030e816200025d565b81146200031a57600080fd5b50565b620003288162000287565b81146200033457600080fd5b50565b620003428162000291565b81146200034e57600080fd5b50565b6200035c81620002a1565b81146200036857600080fd5b50565b60805160601c60a05160c05160601c60e0516101005160c01c6101205160e01c610140516114b6620003e76000396000818161081201526108be015260006106c10152600061069e0152600061067d015260006106410152600081816102fa01526103f7015260008181610337015261038b01526114b66000f3fe6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906110bc565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b60405161011491906110a1565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e95565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610da5565b610564565b005b34801561018557600080fd5b5061018e610789565b60405161019b9190610fda565b60405180910390f35b3480156101b057600080fd5b506101b96107b3565b6040516101c691906110bc565b60405180910390f35b3480156101db57600080fd5b506101e46107c2565b6040516101f191906110bc565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610df2565b6107cf565b60405161022f92919061101e565b60405180910390f35b34801561024457600080fd5b5061024d6108ba565b60405161025a91906110bc565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190610e3b565b6108e2565b6040516102979190610fda565b60405180910390f35b3480156102ac57600080fd5b506102b5610929565b6040516102c291906110bc565b60405180910390f35b3480156102d757600080fd5b506102e0610933565b6040516102ed91906110bc565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610ff5565b60405180910390fd5b6103f1828261093f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462611396565b5b600160149054906101000a900460ff16600181111561048557610484611396565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105a46040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152506107cf565b509050806106135747600080549050600160149054906101000a900460ff1660018111156105d5576105d4611396565b5b6040517fe059521b00000000000000000000000000000000000000000000000000000000815260040161060a939291906110d7565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561063857610637611396565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161070295949392919061104e565b602060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190610e68565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107f7576107f6611396565b5b6000600181111561080b5761080a611396565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261083f91906111b7565b1190506000806000805490501190506000804711905060008480156108615750835b801561086a5750825b80156108735750815b9050806040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250965096505050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108f7576108f66113c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b600080805490508260008151811061095a576109596113c5565b5b602002602001015161096c9190611307565b90506000808281548110610983576109826113c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a1757610a16611396565b5b0217905550600067ffffffffffffffff811115610a3757610a366113f4565b5b604051908082528060200260200182016040528015610a655781602001602082028036833780820191505090505b5060009080519060200190610a7b929190610b70565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa990610fc5565b60006040518083038185875af1925050503d8060008114610ae6576040519150601f19603f3d011682016040523d82523d6000602084013e610aeb565b606091505b5050905080610b26576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b90565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000610c2a610c2584611133565b61110e565b90508083825260208201905082856020860282011115610c4d57610c4c61142d565b5b60005b85811015610c7d5781610c638882610d7b565b845260208401935060208301925050600181019050610c50565b5050509392505050565b6000610c9a610c958461115f565b61110e565b905082815260208101848484011115610cb657610cb5611432565b5b610cc1848285611294565b509392505050565b600082601f830112610cde57610cdd611428565b5b8135610cee848260208601610c17565b91505092915050565b60008083601f840112610d0d57610d0c611428565b5b8235905067ffffffffffffffff811115610d2a57610d29611423565b5b602083019150836001820283011115610d4657610d4561142d565b5b9250929050565b600082601f830112610d6257610d61611428565b5b8135610d72848260208601610c87565b91505092915050565b600081359050610d8a81611469565b92915050565b600081519050610d9f81611469565b92915050565b60008060208385031215610dbc57610dbb61143c565b5b600083013567ffffffffffffffff811115610dda57610dd9611437565b5b610de685828601610cf7565b92509250509250929050565b600060208284031215610e0857610e0761143c565b5b600082013567ffffffffffffffff811115610e2657610e25611437565b5b610e3284828501610d4d565b91505092915050565b600060208284031215610e5157610e5061143c565b5b6000610e5f84828501610d7b565b91505092915050565b600060208284031215610e7e57610e7d61143c565b5b6000610e8c84828501610d90565b91505092915050565b60008060408385031215610eac57610eab61143c565b5b6000610eba85828601610d7b565b925050602083013567ffffffffffffffff811115610edb57610eda611437565b5b610ee785828601610cc9565b9150509250929050565b610efa816111eb565b82525050565b610f09816111fd565b82525050565b610f1881611209565b82525050565b6000610f2982611190565b610f33818561119b565b9350610f438185602086016112a3565b610f4c81611441565b840191505092915050565b610f6081611282565b82525050565b6000610f736000836111ac565b9150610f7e82611452565b600082019050919050565b610f9281611226565b82525050565b610fa181611254565b82525050565b610fb08161125e565b82525050565b610fbf8161126e565b82525050565b6000610fd082610f66565b9150819050919050565b6000602082019050610fef6000830184610ef1565b92915050565b600060408201905061100a6000830185610ef1565b6110176020830184610ef1565b9392505050565b60006040820190506110336000830185610f00565b81810360208301526110458184610f1e565b90509392505050565b600060a0820190506110636000830188610f0f565b6110706020830187610fb6565b61107d6040830186610f89565b61108a6060830185610fa7565b6110976080830184610fa7565b9695505050505050565b60006020820190506110b66000830184610f57565b92915050565b60006020820190506110d16000830184610f98565b92915050565b60006060820190506110ec6000830186610f98565b6110f96020830185610f98565b6111066040830184610f98565b949350505050565b6000611118611129565b905061112482826112d6565b919050565b6000604051905090565b600067ffffffffffffffff82111561114e5761114d6113f4565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561117a576111796113f4565b5b61118382611441565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111c282611254565b91506111cd83611254565b9250828210156111e0576111df611338565b5b828203905092915050565b60006111f682611234565b9050919050565b60008115159050919050565b6000819050919050565b600081905061122182611455565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061128d82611213565b9050919050565b82818337600083830152505050565b60005b838110156112c15780820151818401526020810190506112a6565b838111156112d0576000848401525b50505050565b6112df82611441565b810181811067ffffffffffffffff821117156112fe576112fd6113f4565b5b80604052505050565b600061131282611254565b915061131d83611254565b92508261132d5761132c611367565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061146657611465611396565b5b50565b61147281611254565b811461147d57600080fd5b5056fea2646970667358221220800fe325e158709e9e7f3f4f9b2dcaa5211cd38b0e624a466c3bc0f5472ef5b664736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100c25760003560e01c806353a2c19a1161007f57806391ad27b41161005957806391ad27b414610238578063e55ae4e814610263578063f43b52cb146102a0578063fd6673f5146102cb576100c2565b806353a2c19a146101a45780635f1b0fd8146101cf5780636e04ff0d146101fa576100c2565b806309bc33a7146100c7578063115cbaf5146100f25780631fe543e31461011d5780632cfcc539146101465780634585e33b14610150578063473f1ddc14610179575b600080fd5b3480156100d357600080fd5b506100dc6102f6565b6040516100e991906110bc565b60405180910390f35b3480156100fe57600080fd5b5061010761031e565b60405161011491906110a1565b60405180910390f35b34801561012957600080fd5b50610144600480360381019061013f9190610e95565b610335565b005b61014e6103f5565b005b34801561015c57600080fd5b5061017760048036038101906101729190610da5565b610564565b005b34801561018557600080fd5b5061018e610789565b60405161019b9190610fda565b60405180910390f35b3480156101b057600080fd5b506101b96107b3565b6040516101c691906110bc565b60405180910390f35b3480156101db57600080fd5b506101e46107c2565b6040516101f191906110bc565b60405180910390f35b34801561020657600080fd5b50610221600480360381019061021c9190610df2565b6107cf565b60405161022f92919061101e565b60405180910390f35b34801561024457600080fd5b5061024d6108ba565b60405161025a91906110bc565b60405180910390f35b34801561026f57600080fd5b5061028a60048036038101906102859190610e3b565b6108e2565b6040516102979190610fda565b60405180910390f35b3480156102ac57600080fd5b506102b5610929565b6040516102c291906110bc565b60405180910390f35b3480156102d757600080fd5b506102e0610933565b6040516102ed91906110bc565b60405180910390f35b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600160149054906101000a900460ff16905090565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146103e757337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f40000000000000000000000000000000000000000000000000000000081526004016103de929190610ff5565b60405180910390fd5b6103f1828261093f565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561044f576040517fbd4e069500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000600181111561046357610462611396565b5b600160149054906101000a900460ff16600181111561048557610484611396565b5b146104bc576040517f1425571c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60006105a46040518060400160405280600281526020017f30780000000000000000000000000000000000000000000000000000000000008152506107cf565b509050806106135747600080549050600160149054906101000a900460ff1660018111156105d5576105d4611396565b5b6040517fe059521b00000000000000000000000000000000000000000000000000000000815260040161060a939291906110d7565b60405180910390fd5b60018060146101000a81548160ff0219169083600181111561063857610637611396565b5b021790555060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d307f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000060037f000000000000000000000000000000000000000000000000000000000000000060016040518663ffffffff1660e01b815260040161070295949392919061104e565b602060405180830381600087803b15801561071c57600080fd5b505af1158015610730573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107549190610e68565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b6000600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600163ffffffff16905090565b6000600361ffff16905090565b600060606000600160149054906101000a900460ff1660018111156107f7576107f6611396565b5b6000600181111561080b5761080a611396565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261083f91906111b7565b1190506000806000805490501190506000804711905060008480156108615750835b801561086a5750825b80156108735750815b9050806040518060400160405280600381526020017f3078300000000000000000000000000000000000000000000000000000000000815250965096505050505050915091565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008082815481106108f7576108f66113c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000600254905090565b60008080549050905090565b600080805490508260008151811061095a576109596113c5565b5b602002602001015161096c9190611307565b90506000808281548110610983576109826113c5565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506000600160146101000a81548160ff02191690836001811115610a1757610a16611396565b5b0217905550600067ffffffffffffffff811115610a3757610a366113f4565b5b604051908082528060200260200182016040528015610a655781602001602082028036833780820191505090505b5060009080519060200190610a7b929190610b70565b504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610aa990610fc5565b60006040518083038185875af1925050503d8060008114610ae6576040519150601f19603f3d011682016040523d82523d6000602084013e610aeb565b606091505b5050905080610b26576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610be9579160200282015b82811115610be85782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b90565b5b509050610bf69190610bfa565b5090565b5b80821115610c13576000816000905550600101610bfb565b5090565b6000610c2a610c2584611133565b61110e565b90508083825260208201905082856020860282011115610c4d57610c4c61142d565b5b60005b85811015610c7d5781610c638882610d7b565b845260208401935060208301925050600181019050610c50565b5050509392505050565b6000610c9a610c958461115f565b61110e565b905082815260208101848484011115610cb657610cb5611432565b5b610cc1848285611294565b509392505050565b600082601f830112610cde57610cdd611428565b5b8135610cee848260208601610c17565b91505092915050565b60008083601f840112610d0d57610d0c611428565b5b8235905067ffffffffffffffff811115610d2a57610d29611423565b5b602083019150836001820283011115610d4657610d4561142d565b5b9250929050565b600082601f830112610d6257610d61611428565b5b8135610d72848260208601610c87565b91505092915050565b600081359050610d8a81611469565b92915050565b600081519050610d9f81611469565b92915050565b60008060208385031215610dbc57610dbb61143c565b5b600083013567ffffffffffffffff811115610dda57610dd9611437565b5b610de685828601610cf7565b92509250509250929050565b600060208284031215610e0857610e0761143c565b5b600082013567ffffffffffffffff811115610e2657610e25611437565b5b610e3284828501610d4d565b91505092915050565b600060208284031215610e5157610e5061143c565b5b6000610e5f84828501610d7b565b91505092915050565b600060208284031215610e7e57610e7d61143c565b5b6000610e8c84828501610d90565b91505092915050565b60008060408385031215610eac57610eab61143c565b5b6000610eba85828601610d7b565b925050602083013567ffffffffffffffff811115610edb57610eda611437565b5b610ee785828601610cc9565b9150509250929050565b610efa816111eb565b82525050565b610f09816111fd565b82525050565b610f1881611209565b82525050565b6000610f2982611190565b610f33818561119b565b9350610f438185602086016112a3565b610f4c81611441565b840191505092915050565b610f6081611282565b82525050565b6000610f736000836111ac565b9150610f7e82611452565b600082019050919050565b610f9281611226565b82525050565b610fa181611254565b82525050565b610fb08161125e565b82525050565b610fbf8161126e565b82525050565b6000610fd082610f66565b9150819050919050565b6000602082019050610fef6000830184610ef1565b92915050565b600060408201905061100a6000830185610ef1565b6110176020830184610ef1565b9392505050565b60006040820190506110336000830185610f00565b81810360208301526110458184610f1e565b90509392505050565b600060a0820190506110636000830188610f0f565b6110706020830187610fb6565b61107d6040830186610f89565b61108a6060830185610fa7565b6110976080830184610fa7565b9695505050505050565b60006020820190506110b66000830184610f57565b92915050565b60006020820190506110d16000830184610f98565b92915050565b60006060820190506110ec6000830186610f98565b6110f96020830185610f98565b6111066040830184610f98565b949350505050565b6000611118611129565b905061112482826112d6565b919050565b6000604051905090565b600067ffffffffffffffff82111561114e5761114d6113f4565b5b602082029050602081019050919050565b600067ffffffffffffffff82111561117a576111796113f4565b5b61118382611441565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b60006111c282611254565b91506111cd83611254565b9250828210156111e0576111df611338565b5b828203905092915050565b60006111f682611234565b9050919050565b60008115159050919050565b6000819050919050565b600081905061122182611455565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600061128d82611213565b9050919050565b82818337600083830152505050565b60005b838110156112c15780820151818401526020810190506112a6565b838111156112d0576000848401525b50505050565b6112df82611441565b810181811067ffffffffffffffff821117156112fe576112fd6113f4565b5b80604052505050565b600061131282611254565b915061131d83611254565b92508261132d5761132c611367565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b6002811061146657611465611396565b5b50565b61147281611254565b811461147d57600080fd5b5056fea2646970667358221220800fe325e158709e9e7f3f4f9b2dcaa5211cd38b0e624a466c3bc0f5472ef5b664736f6c63430008070033",
  "devdoc": {
    "author": "Vincent Verdugo",
    "details": "This implements Chainlink VRF v2 and Chainlink Keepers",
    "kind": "dev",
    "methods": {
      "checkUpkeep(bytes)": {
        "details": "this is the function that the Chainlink keeper nodes call they look for the `upkeepNeeded` to return true. The following should be true in order to return true: 1. Our time interval should have passed 2. The lottery should have at least 1 player, and have some ETH 3. Our subscription is funded with LINK 4. The lottery should be in an \"open\" state"
      }
    },
    "title": "A sample raffle contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "This contract is for creating an untamperable decentralized smart contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 871,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 888,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 20,
        "slot": "1",
        "type": "t_enum(RaffleState)866"
      },
      {
        "astId": 893,
        "contract": "contracts/Raffle.sol:Raffle",
        "label": "s_lastTimestamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)866": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}